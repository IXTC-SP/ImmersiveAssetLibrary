<%- include('partials/header') %>
<link rel="stylesheet" href="modellist.css" />
<section class="d-flex flex-column m-auto mt-5">
  <div class="container-fluid px-5" id="top-bar">
    <form class="" action="/assets" method="post" id="model-filter-form">

        <div class="d-flex justify-content-between">
          <div class="d-flex wrap">
            <div class="me-3">
              <label style="font-size: 1.5em; color: #3878b1;" for="search"
              >Category:
            </label>
            </div>
            <div>
              <select
              id="asset-type"
              class="form-select rounded-5"
              name="asset"
              onchange="submitFilterForm(`model-filter-form`)"
            >
              <option class="asset" type="button" value="3dmodel" selected>
                3D Model
              </option>
              <!-- <option class="asset" type="button" value="script">Script</option> -->
              <option class="asset" type="button" value="360">360 Image</option>
            </select>
            </div>
           
          </div>
          <div class="my-auto mx-0">
            <input
              class="large rounded-5 border-1 ps-3 search-input"
              type="text"
              name="searchterm"
              id="search-text"
              placeholder="Search assets..."
            />
            <button
              class=" password-eye upload-btn bg-transparent p-0"
              type="submit"
              onclick="submitFilterForm(`model-filter-form`)"
            >
            <i class="fa-solid fa-magnifying-glass icon-size"></i>
            
            </button>
          </div>
        </div>
     
      <hr />
      <div class="d-flex flex-wrap align-items-center">
        
        <div class="form-check form-check-inline text-muted d-flex ps-0">
          <select
            class="form-select rounded-5"
            id="format-type"
            name="format"
            aria-label="Floating label select example"
            onchange="submitFilterForm(`model-filter-form`)"
          >
            <option class="format" type="button" value="format" selected>
              Format
            </option>
            <%if(is3dmodelPage){%>
            <option class="format" type="button" value="obj">.obj</option>
            <option class="format" type="button" value="fbx">.fbx</option>
            <%}else{%>
            <option class="format" type="button" value="equirectangular">
              Equirectangular
            </option>
            <option class="format" type="button" value="cubemap">
              Cubemap
            </option>
            <%}%>
          </select>
        </div>
        <%if(is3dmodelPage){%>
        <div class="form-check form-check-inline text-muted d-flex">
          <input
            class="form-check-input"
            type="checkbox"
            name="attributes"
            value="animated"
            onChange="submitFilterForm(`model-filter-form`);"
          />
          <label class="form-check-label" for="animated">Animated</label>
        </div>
        <div class="form-check form-check-inline text-muted d-flex">
          <input
            class="form-check-input"
            type="checkbox"
            id="lowpoly-type"
            name="attributes"
            value="lowpoly"
            onChange="submitFilterForm(`model-filter-form`);"
          />
          <label class="form-check-label" for="lowpoly">Low Poly</label>
        </div>
        <div class="form-check form-check-inline text-muted d-flex">
          <input
            class="form-check-input"
            type="checkbox"
            name="attributes"
            value="rigged"
            onChange="submitFilterForm(`model-filter-form`);"
          />
          <label class="form-check-label" for="rigged">Rigged</label>
        </div>
        <div class="form-check form-check-inline text-muted d-flex">
          <input
            class="form-check-input"
            type="checkbox"
            name="attributes"
            value="textured"
            onChange="submitFilterForm(`model-filter-form`);"
          />
          <label class="form-check-label" for="textured">Textured</label>
        </div>
        <%}%> 
      </div>
      <hr />
    </form>
  </div>

  <div class="container-fluid px-5">
    <div
      class="d-flex flex-wrap gap-5 mb-5 justify-content-evenly"
      id="asset-row"
    >
      <div id="asset-card" style="display: none">
        <a id="asset-link" href="#">
          <div class="card upload-card col-md-3 p-0">
            <div class="upload-card-img-div">
              <img
                class="w-100 upload-card-img"
                id="asset-img"
                alt=""
                src=""
                data-holder-rendered="true"
              />
            </div>
            <div class="card-body upload-card-body p-3 d-flex justify-content-between" >
              <div class="my-auto mx-0 w-75" >
                <p class="card-title m-0 text-overflow" id="asset-name"></p>
                <p id="asset-tags" class="card-text text-overflow"></p>                
                
              </div>
              <div class="my-auto mx-0" id="asset-download">
                
              </div>
             
            </div>                    
          </div>
        </a>
      </div>

    </div>
  </div>

  <div id="load-btn" class="mx-auto mb-5" >
    <button type="button" class="btn theme-color rounded-8" onclick="LoadMore()">
      Load More
    </button>
  </div>
</section>

<script type="text/javascript">
  var fulldatamodels = <%-JSON.stringify(data.models) %>;
  var loadamt = 8;
  var beforelen = 0;
  var afterlen = 0;
  var currentloaddatamodels = [];
  const cardmain = document.getElementById("asset-card");
  const assetrow = document.getElementById("asset-row");

  if (fulldatamodels.length > 0) {
    LoadMore();
  }else{
    let addMessage = document.getElementById("asset-row");
    let message = document.createElement("h4")
    message.innerHTML =  "We couldn't find any results base on your search filters."
    addMessage.append(message)
    let loadBtn = document.getElementById("load-btn");
    loadBtn.classList += " d-none"
  }
  
  function LoadMore() {
      if (afterlen > fulldatamodels.length) return;
      afterlen = beforelen + loadamt;
      currentloaddatamodels = fulldatamodels.slice(beforelen, afterlen);
      for (var i = 0; i < currentloaddatamodels.length; i++) {
        CreateAssetCard(currentloaddatamodels[i]);
      }
      beforelen = afterlen;
  }

  function CreateAssetCard(data) {
    let clone = cardmain.cloneNode(true);
    clone.style.display = "block";
    let link = clone.querySelector("#asset-link")
    console.log(data._id)
    link.href = `/asset/<%- assettype %>/${data._id}`
    let assetimg = clone.querySelector("#asset-img");
    //console.log(assetimg);
    assetimg.src =
      // data.assetPath.folderpath.slice(1) + "/" + data.assetPath.thumbnail;
      // data.assetPath.folderpath + "/" + data.assetPath.thumbnail;
      data.assetPath.thumbnail;
    //console.log(assetimg.src);
    let assetname = clone.querySelector("#asset-name");
    assetname.innerHTML = data.title;
    let assetTag = clone.querySelector("#asset-tags")
    assetTag.innerHTML = `<small> ${data.tags.toString().replaceAll(","," ")} </small>`;
    let assetDownloadBtn = clone.querySelector("#asset-download")
    assetDownloadBtn.innerHTML = `<form action="/downloadasset/<%= is3dmodelPage?"model":"360"%>/${data._id}" method="POST">
                  <Button
                    type="submit"
                    class="p-0 btn btn-outline-primary box-shadow-0 border-0"
                    ><i class="fa fa-download icon-size" aria-hidden="true"></i
                  ></Button>
                </form>`
    assetrow.appendChild(clone);
  }

  // function addDownloadButtonToCard(assetId) {

  // }
  // addDownloadButtonToCard();

  const submitFilterForm = (elementId) => {
    console.log("submit filter form");
    storeInlocalStorage("search-text", "searchTerm");
    storeInlocalStorage("format-type", "selectedFormat");
    storeInlocalStorage("asset-type", "selectedAssetType");
    storeCheckedItems();
    let form = document.getElementById(elementId);
    form.submit();
  };

  // const submitAssetForm = () => {
  //   storeInlocalStorage("asset-type","selectedAssetType")
  //   let form = document.getElementById(elementId);
  //   form.submit();
  // };

  const storeInlocalStorage = (elementId, keyName) => {
    let el = document.getElementById(elementId);
    console.log("store", el.value);
    localStorage.setItem(keyName, JSON.stringify(el.value));
  };

  const storeCheckedItems = () => {
    // const checkedValues = [];
    const checkedItems = document.querySelectorAll(
      "input[type=checkbox]:checked"
    );
    const arrayCheckedItems = [...checkedItems];
    if (checkedItems !== null) {
      const selectedAttributes = arrayCheckedItems.map((item) => {
        return item.value;
      });
      console.log("theres checked boxes");
      localStorage.setItem(
        "selectedAttributes",
        JSON.stringify(selectedAttributes)
      );
    } else {
      console.log("theres no checked boxes");
      localStorage.setItem("selectedAttributes", JSON.stringify([]));
    }
    // //invoke the submit
    // submitFilterForm(`model-filter-form`);
  };

  const setSelectedOption = (elementClass, elementValue) => {
    //let form = document.getElementById(elementId);
    const options = document.getElementsByClassName(elementClass);
    const arrayOptions = [...options];
    arrayOptions.forEach((element) => {
      element.selected = false;
      if (element.value === `${elementValue}`) {
        element.selected = true;
      }
    });
  };

  const setSeachString = (searchText) => {
    let searchInput = document.getElementById("search-text");
    searchInput.value = searchText;
  };

  const showPreviousCheckedItems = () => {
    console.log("show checked items");
    const selectedAttributes = JSON.parse(
      localStorage.getItem("selectedAttributes")
    );
    console.log("------->", selectedAttributes);
    //iff theres previous checked items, the clear btn should enabled
    if (selectedAttributes !== null && selectedAttributes.length > 0) {
      selectedAttributes.forEach((item) => {
        document.querySelector(`input[value=${item}]`).checked = true;
      });
    }
  };
  const showPreviousSelectedFilter = () => {
    console.log("show Selected Filter");
    const selectedAssetType = JSON.parse(
      localStorage.getItem("selectedAssetType")
    );
    const selectedFormat = JSON.parse(localStorage.getItem("selectedFormat"));
    const searchTerm = JSON.parse(localStorage.getItem("searchTerm"));
    setSeachString(searchTerm);
    setSelectedOption("asset", selectedAssetType);
    setSelectedOption("format", selectedFormat);
    console.log("------->", selectedAssetType, selectedFormat);
  };

  const init = () => {
    showPreviousSelectedFilter();
    showPreviousCheckedItems();
  };
  const submitButtonClick = () => {
    event.preventDefault();
    //other stuff you want to do instead...
  };

  init();
</script>

<%- include('partials/footer') %>
