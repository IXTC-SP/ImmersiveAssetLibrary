<%- include('../partials/header') %>
  <script type="text/javascript" src="jszip.min.js"></script>


  <section class="w-75 d-flex flex-column m-auto mt-5"></section>
  <style>
    .drop-zone {
      border: 2px dotted gray;
      width: auto;
      height: 400px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: space-between;
    }

    .text-center {
      text-align: center;
    }

    .browse-btn {
      text-decoration: underline;
    }


    .upload-btn-group {
      padding-top: 2em;
      display: flex;
      justify-content: space-between;
    }

    .page-btn {
      border: 1px solid black;
      background-color: white;
      /* border-radius: 30%; */
      color: black;
      /* padding: 14px 48px;
      margin: auto; */
    }


    .card {
      width: 120px;
      height: 120px;
      position: relative;
      display: inline-block;
    }

    .file-btn {
      position: absolute;
      left: 100px;
      font-size: 20px;
      top: -5px;

    }

    .card-file-info {
      position: absolute;
      height: 32px;
      width: 100%;
      bottom: 0;
      left: 0;
    }

    .texture-assign-box {
      border: 1px solid black;
      background-color: white;
    }

    /* The Modal (background) */
    .modal {
      display: none;
      /* Hidden by default */
      position: fixed;
      /* Stay in place */
      z-index: 1;
      /* Sit on top */
      padding-top: 100px;
      /* Location of the box */
      left: 0;
      top: 0;
      width: 100%;
      /* Full width */
      height: 100%;
      /* Full height */
      overflow: auto;
      /* Enable scroll if needed */
      background-color: rgb(0, 0, 0);
      /* Fallback color */
      background-color: rgba(0, 0, 0, 0.4);
      /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
      background-color: #fefefe;
      margin: auto;
      padding: 20px;
      border: 1px solid #888;
      width: 400px;
      align-items: center;
      display: flex;
    }

    /* The Close Button */
    .close {
      color: #aaaaaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      align-self: flex-end;
    }

    .close:hover,
    .close:focus {
      color: #000;
      text-decoration: none;
      cursor: pointer;
    }

    .drop-icon {
      font-size: 60px;
      color: #0092FF;
    }

    .drag-text {
      font-size: 28px;
      font-weight: bold
    }

    .browse-btn {
      color: #0092FF;
      text-decoration: none;
      cursor: pointer;
    }

    .support-types-text {
      font-size: 14px;
      font-weight: 300
    }
    .title-upload{
      font-weight: 300
    }

    .btn-size {
      width: 100px;
    }

    .drop-zone-border {
      border: 0px;
      text-align: center;
      background: linear-gradient(to right,#2b7a9e 50%, rgba(255, 255, 255, 0) 0%), linear-gradient(#2b7a9e 50%, rgba(255, 255, 255, 0) 0%), linear-gradient(to right, #2b7a9e 50%, rgba(255, 255, 255, 0) 0%), linear-gradient(#2b7a9e 50%, rgba(255, 255, 255, 0) 0%);
      background-position: top, right, bottom, left;
      background-repeat: repeat-x, repeat-y;
      background-size: 30px 2px, 2px 30px;
      width: auto;
      height: 400px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: space-between;
    }
  </style>

  <!-- <div class="text-center">
    <h2>Upload a new asset</h2>
  </div> -->
  <div class="card-body w-100 p-0">
    <h2 class="pb-2 text-center title-upload">Upload a new asset</h2>
    <div class="row ">
      <div class="col-2">
      </div>
      <div class="col-8">
        <div class="p-3 drop-zone-border" id="drop-zone">
          <div class="collected-files">
          </div>
          <i id ="trash-icon" class="trash-btn fa-regular fa-trash-can" style="display: none"></i>
          <div class="text-center mb-2 d-flex flex-column">
            <i class="fa-solid fa-arrow-up-from-bracket drop-icon" ></i>
            <span class="drag-text">Drag and Drop <span class="browse-btn" id="browse-btn" onclick="browse()">or
                Browse</span></span><br>
            <input type="file" id="browse-input" name="file" value="" style="display:none;">
          </div>
          <div>
            <p class="text-center mb-0 " id="format-support-info"><span class="support-types-text">We support </span><span id="span-format"></span>
            </p>
            <p class="text-center mb-0 support-types-text" id="format-3dmodel-info">You can also upload a
              <strong>ZIP</strong> folder containing only your textures, materials, and mesh.</p>
            <p class="text-center mb-0 support-types-text">Additional files can be added in the next step</p>
          </div>
        </div>
        <div class="upload-btn-group">
          <!-- <button type="submit" class="btn theme-color btn-rounded">
            <i class="fa fa-plus me-2" aria-hidden="true"></i>Cancel
          </button>

          <button type="submit" class="btn theme-color btn-rounded">
            <i class="fa fa-plus me-2" aria-hidden="true"></i>Cancel
          </button> -->
          <button class="btn btn-size btn-outline-info rounded-8 cancel-page-btn" type="button"
            name="button">Cancel</button>
          <button class="btn btn-size theme-color btn-rounded upload-page-btn" type="button" name="button"> Next
          </button>
        </div>

      </div>
      <div class="col-2">
        <label for="asset-select" class="support-types-text">Select Asset Type:</label>
        <select class="admin-input rounded-2 p-1 w-100"name="assets" id="asset-select" onchange="triggerChangeWithAssetSelect()">
          <option value="3dmodel">3D Model</option>
          <option value="script">Script</option>
          <option value="360image">360 Image</option>
        </select>

        <label class= " mt-2"id="asset-format-id" for="asset-format">Select Format:</label>
        <select class="admin-input rounded-2 p-1 w-100"name="format" id="asset-format" onchange="onChangeFormatType(this)">
        </select>
      </div>
    </div>
  </div>

  <!-- The Modal -->
  <div id="myModal" class="modal">
    <!-- Modal content -->
    <div class="modal-content">
      <span class="close" onclick="closeModalContent()">&times;</span>
      <div class="cubemap-content">
        <p>Assign Texture :</p>
        <div class="container">
          <div class="row" style="height: 100px;">
            <div class="col-3 texture-assign-box">
              <label for="top-texture-selection">Top</label>
              <select name="top-texture-selection" class="cubemap-texture-assign" id="texture-selection">
              </select>
            </div>
          </div>
          <div class="row" style="height: 100px;">
            <div class="col-3 texture-assign-box">
              <label for="front-texture-selection">Front</label>
              <select name="front-texture-selection" class="cubemap-texture-assign" id="texture-selection">
              </select>
            </div>
            <div class="col-3 texture-assign-box">
              <label for="right-texture-selection">Right</label>
              <select name="right-texture-selection" class="cubemap-texture-assign" id="texture-selection">
              </select>
            </div>
            <div class="col-3 texture-assign-box">
              <label for="back-texture-selection">Back</label>
              <select name="back-texture-selection" class="cubemap-texture-assign" id="texture-selection">
              </select>
            </div>
            <div class="col-3 texture-assign-box">
              <label for="left-texture-selection">Left</label>
              <select name="left-texture-selection" class="cubemap-texture-assign" id="texture-selection">
              </select>
            </div>
          </div>
          <div class="row" style="height: 100px;">
            <div class="col-3 texture-assign-box">
              <label for="bottom-texture-selection">Bottom</label>
              <select name="bottom-texture-selection" class="cubemap-texture-assign" id="texture-selection">
              </select>
            </div>
          </div>
        </div>
      </div>
      <div class="model-content d-flex flex-column mb-3 w-100">
        <p><strong>Assign Texture : </strong></p>
        <label for="diffuse-texture-selection">Diffuse</label>
        <select name="diffuse-texture-selection" class="model-texture-assign mb-1 w-100" id="texture-selection">
        </select>
        <label for="normal-texture-selection">Normal</label>
        <select name="normal-texture-selection" class="model-texture-assign mb-1 w-100" id="texture-selection">
        </select>
        <label for="occlusion-texture-selection">Occlusion</label>
        <select name="occlusion-texture-selection" class="model-texture-assign mb-1 w-100" id="texture-selection">
        </select>
        <label for="height-texture-selection">Height</label>
        <select name="height-texture-selection" class="model-texture-assign mb-1 w-100" id="texture-selection">
        </select>
        <label for="emissive-texture-selection">Emissive</label>
        <select name="emissive-texture-selection" class="model-texture-assign mb-1 w-100" id="texture-selection">
        </select>
        <label for="thumbnail">Thumbnail</label>
        <select name="thumbnail" class="model-texture-assign mb-1" id="texture-selection">
        </select>
      </div>
      <!-- <button class="page-btn left" type="button" name="button" onclick="createuploadcontent()">Next</button> -->
      <button class="btn btn-size theme-color btn-rounded upload-page-btn" type="button" onclick="createuploadcontent()" name="button"> Next
      </button>

      <!-- <form class="upload-form" id="upload-form" action="/uploadcontent" method="post" enctype="multipart/form-data" onkeydown="return event.key != 'Enter';">
        <div class="upload-btn-group">
          <input class="upload-page-btn right" type="submit" id='submit-btn' value="Next">
        </div>
      </form> -->
    </div>

</body>

<script type="text/javascript" src="fileextensioncheck.js"></script>
<script>
  const dragArea = document.querySelector(".drop-zone");
  const dragText = document.querySelector(".drag-text");
  const collectedfiles = document.querySelector(".collected-files");
  const nextpagebtn = document.querySelector(".upload-page-btn");
  class fileObj {
    constructor(type,filename,file) {
      this.type = type
      this.filename = filename;
      this.file = file;
    }
  }
  var fileObjs = [];

  nextpagebtn.addEventListener('click', function(event) {
    processUploads();
    event.preventDefault();
  });

  const uploadform = document.querySelector(".upload-form");

  function assigntexture(e){
    var filename = e.target.name.split("-")[0];
    fileObjs.forEach((f,i)=>{
      if(f.file.name == e.target.value){
        f.filename = filename;
        return;
      }})
      var fileObjs = [];



    switch (currenttype){
      case "3dmodel":
        nextURL = "/editpage/model";
        postURL = "/uploadtmp3dmodel";
        break;
      case "360image":
        nextURL = "/editpage/360";
        postURL = "/uploadtmp360";
      break;
      case "script":
        nextURL = "/editpage/script";
        postURL = "/uploadtmpscript";
        break;
    }
    //decide asset type
    formData.append("type", currenttype);
    if(currentformat != "") formData.append("format", currentformat);
    //set file names
    fileObjs.forEach((fileObj, i) => {
      console.log(fileObj.type + " " + fileObj.filename + " " + fileObj.file.name);
      var savedName = fileObj.filename;
      if(fileObj.file.name.split("/")[1]){
        savedName += "_" + fileObj.file.name.split("/")[1];
      } else {
        savedName += "_" + fileObj.file.name;
      }
      if(fileObj.filename == 'thumbnail') {
        formData.append('thumbnail', fileObj.file, savedName);
      }
      else formData.append(fileObj.type, fileObj.file, savedName);
    });
    request.onreadystatechange = function() { // listen for state changes
      if (request.readyState == 4 && request.status == 200) { // when completed we can move away
        window.location = nextURL;
      }
    }

    request.open("POST", postURL, false);
    request.send(formData);
  }

  //create option for select element
  function createoption(text, value, parent) {
    var option = document.createElement("option");
    option.text = text;
    option.value = value;
    parent.add(option);
  }

  //next page btn
  function processUploads() {
    //if no uploads added
    if (files.length == 0)
      alert("no uploads added");

    setupFileObjs();
    //if model file, process and popup to assign textures
    if (currenttype == "3dmodel") {
      changeModalContent("model");
    }
    //if cubemap file, process and popup to assign textures
    if (currenttype == "360image") {
      if(currentformat == 'cubemap') changeModalContent("cubemap");
      else createuploadcontent();
    }
    // if (currenttype == "360image") {
    //   createuploadcontent();
    // }

    if (currenttype == "script") {
      createuploadcontent();
    }
  }

  //creating and managing file card
  let currenttype = "";
  let currentformat = "";

  function createFileCard(filename) {
    //create a card
    const card = document.createElement("div");
    card.classList.add("card");
    collectedfiles.appendChild(card);

    //create remove-btn for the card
    var removebtn = document.createElement('span');
    removebtn.innerHTML = "&times;";
    removebtn.classList.add("file-btn");
    removebtn.addEventListener('click', function(event) {
      removeFile(card, filename);
      event.preventDefault();
    });

    card.appendChild(removebtn);
    //create image for the card
    var img = document.createElement('img');
    img.src = '';
    img.classList.add("img-top");
    card.appendChild(img);


    //create file info
    var fileinfo = document.createElement('div');
    fileinfo.classList.add('card-file-info');
    card.appendChild(fileinfo);
    var fileinfospan = document.createElement('span');
    fileinfospan.innerHTML = filename;
    fileinfo.appendChild(fileinfospan);
  }

  function clearFilesIfNewType(newtype) {
    if (currenttype != newtype) {
      clearAllFileContent();
      currenttype = newtype;
    }
  }

  function clearAllFileContent() {
    collectedfiles.innerHTML = '';
    files = [];
  }

  function removeFile(card, filename) {
    card.remove();
    for (var i = 0; i < files.length; i++) {
      if (files[i].name === filename) {
        files.splice(i, 1);
      }

  function readFiles(files) {
    for(i = 0;i< files.length;i++){
      readFile(files[i]);
    }
  }

  function readFile(file) {
    let correctfiletype = false;
    if(currentformat == 'equirectangular' && files.length == 1) return;
    switch (currenttype) {
      case "3dmodel":
        correctfiletype = isObj(file.name) || isImage(file.name);
        break;
      case "script":
        switch(currentformat){
          case 'csharp':
          correctfiletype = isCsharp(file.name);
          break;
          case 'javascript':
          correctfiletype = isJavascript(file.name);
          break;
          case 'python':
          correctfiletype = isPython(file.name);
          break;
        }
        break;
      case "360image":
        correctfiletype = isImage(file.name);
        break;
    }
    if (correctfiletype) {
      createFileCard(file.name);
      files.push(file);
      console.log(files + " currently added file");
    }
  }

  function setupFileObjs(){
    fileObjs = [];
    if (currenttype == "3dmodel") {
      files.forEach((file,i)=>{
        var f;
        if(isObj(file.name)){
          f = new fileObj("model","model", file)
        } else {
          f = new fileObj("image","other", file)
        }
        fileObjs.push(f);
      });
      return;
    }
    if (currenttype == "script") {
      console.log(currentformat);
      files.forEach((file,i)=>{
        fileObjs.push(new fileObj("script", currentformat, file));
      });
      console.log(fileObjs);
      return;
    }
    //if cubemap file, process and popup to assign textures
    if (currenttype == "360image" && currentformat == "cubemap") {
      files.forEach((file,i)=>{
        fileObjs.push(new fileObj("image","other", file));
      });
      return;
    }
    if (currenttype == "360image" && currentformat == "equirectangular") {
      files.forEach((file,i)=>{
        fileObjs.push(new fileObj("image","equi", file));
      });
      return;
    }

  }

  let files = [];
  dragArea.addEventListener('dragover', (event) => {
    event.preventDefault();
    dragText.textContent = "Release to Upload"
  });
  dragArea.addEventListener('dragleave', () => {
    dragText.textContent = "Drag & Drop"
  });
  dragArea.addEventListener('drop', async (event) => {
    event.preventDefault();
    if (event.dataTransfer.items) {
      [...event.dataTransfer.files].forEach(async (file, i) => {
        if (isZip(file.name)) {
          await convertziptofile(file)
        } else {
          readFile(file);
        }
      })

      function readFile(file) {
        let correctfiletype = false;
        switch (currenttype) {
          case "3dmodel":
            correctfiletype = isObj(file.name) || isImage(file.name);
            break;
          case "script":
            correctfiletype = isScript(file.name);
            break;
          case "image":
            correctfiletype = isImage(file.name);
            break;
        }
        if (correctfiletype) {
          createFileCard(file.name);
          files.push(file);
        }
      }

      function setupFileObjs() {
        fileObjs = [];
        files.forEach((file, i) => {
          var f;
          if (isObj(file.name)) {
            f = new fileObj("model", "model", file)
          } else {
            f = new fileObj("image", "other", file)
          }
          fileObjs.push(f);
        });
        console.log(fileObjs);
      }

      let files = [];
      dragArea.addEventListener('dragover', (event) => {
        event.preventDefault();
        dragText.textContent = "Release to Upload"
      });
    }
  });


  async function convertziptofile(file) {
    var collectedfiles = [];
    var jszip = new JSZip();
    var zip = await jszip.loadAsync(file);
    var foldername = '';
    var zipfiles = Object.keys(zip.files);
    for (var i in zipfiles){
      var zipfile = zip.files[zipfiles[i]];
      var fileData = await zipfile.async('blob');
      var filename = zipfiles[i].replace(foldername, "");
      var file = new File([fileData], filename);
      collectedfiles.push(file);
    }
    console.log("complete");
    readFiles(collectedfiles);
  }

  //browse button
  function browse() {
    var i = document.getElementById("browse-input");
    i.click();
  }

  //updating page based on selected asset
  triggerChangeWithAssetSelect();

  function triggerChangeWithAssetSelect() {
    var e = document.getElementById("asset-select");
    var value = e.value;
    var options = [];
    var supportformat = "";
    switch (value) {
      case "360image":
        options = ["cubemap", "equirectangular"];
        supportformat = "We support JPG, JPEG, PNG.";
        enableModelInfo(false);
        break;
      case "script":
        options = ["c#", "javascript", "python"];
        supportformat = "We support c#, javascript, python.";
        enableModelInfo(false);
        break;
      case "3dmodel":
        supportformat = "We support obj, fbx, blend.";
        enableModelInfo(true);
        break;
    }
    clearFilesIfNewType(value);
    createAssetFormat(options);
    updateSupportFormatText(supportformat);
  }

  function createAssetFormat(opts) {
    var x = document.getElementById("asset-format");
    var y = document.getElementById("asset-format-id");
    if (opts.length == 0) {
      x.style.display = "none";
      y.style.display = "none";
    } else {
      x.style.display = "inline-block"
      y.style.display = "inline-block"
      x.options.length = 0;
      opts.forEach((o) => {
        createoption(o, o, x);
      });
      if(x.value == "c#") currentformat = "csharp";
      else currentformat = x.value;
    }


      async function convertziptofile(file) {
        var collectedfiles = [];
        var jszip = new JSZip();
        var zip = await jszip.loadAsync(file);
        var foldername = '';
        var zipfiles = Object.keys(zip.files);
        for (var i in zipfiles) {
          var zipfile = zip.files[zipfiles[i]];
          var fileData = await zipfile.async('blob');
          var filename = zipfiles[i].replace(foldername, "");
          var file = new File([fileData], filename);
          collectedfiles.push(file);
        }
        console.log("complete");
        readFiles(collectedfiles);
      }

      //browse button
      function browse() {
        var i = document.getElementById("browse-input");
        i.click();
      }

      //updating page based on selected asset
      triggerChangeWithAssetSelect();

      function triggerChangeWithAssetSelect() {
        console.log("update")
        var e = document.getElementById("asset-select");
        var value = e.value;
        var options = [];
        var supportformat = "";
        switch (value) {
          case "360image":
            options = ["cubemap", "equirectangular"];
            supportformat = "JPG, JPEG, PNG.";
            enableModelInfo(true);
            break;
          case "script":
            options = ["c#", "javascript", "python"];
            supportformat = "c#, javascript, python.";
            enableModelInfo(true);
            break;
          case "3dmodel":
            supportformat = "obj, fbx.";
            enableModelInfo(true);
            break;
        }
        clearFilesIfNewType(value);
        createAssetFormat(options);
        updateSupportFormatText(supportformat);
      }

      function createAssetFormat(opts) {
        var x = document.getElementById("asset-format");
        var y = document.getElementById("asset-format-id");
        if (opts.length == 0) {
          x.style.display = "none";
          y.style.display = "none";
        } else {
          x.style.display = "inline-block"
          y.style.display = "inline-block"
          x.options.length = 0;
          opts.forEach((o) => {
            createoption(o, o, x);
          });
          currentformat = x.value;
        }

      }

      function updateSupportFormatText(t) {
        var i = document.getElementById("format-support-info");
        var spanText = document.getElementById("span-format");
        spanText.innerText = t;
      }

      function enableModelInfo(b) {
        var i = document.getElementById("format-3dmodel-info");
        if (b) {
          i.style.display = "inline-block";
        } else {
          i.style.display = "none";
        }
      }

      function onChangeFormatType(e) {
        clearAllFileContent();
        currentformat = e.value;
      }

      //modal content selection
      const modelmodalcontent = document.querySelector(".model-content");
      const cubemapmodalcontent = document.querySelector(".cubemap-content")
      const cubemaptextureassignselect = document.querySelectorAll('.cubemap-texture-assign');
      const modeltextureassignselect = document.querySelectorAll('.model-texture-assign');
      const modalcontent = document.querySelector(".modal")
      modalcontent.style = "display:none;"
      modelmodalcontent.style = "display:none;"
      cubemapmodalcontent.style = "display:none;"

      function setupTextureAssignOptions(selects) {

        let textureassignarray = [];
        files.forEach((item, i) => {
          if (isImage(item.name)) {
            textureassignarray.push(item);
          }
        });
        let currenttextureassignselect = selects;

        if (selects[0].options.length - 1 == textureassignarray.length) return;
        for (var i = 0; i < selects.length; i++) {
          selects[i].onchange = function (e) {
            allowOnlySingleTextureAssigning(selects, e);
            assigntexture(e);
          }
          createoption("none", "none", selects[i]);
          for (var j = 0; j < textureassignarray.length; j++) {
            createoption(textureassignarray[j].name, textureassignarray[j].name, selects[i]);
          }
        }
      }

      function allowOnlySingleTextureAssigning(selects, e) {
        for (var i = 0; i < selects.length; i++) {
          if (selects[i] != e.target && selects[i].value == e.target.value) {
            selects[i].value = "none";
          }
        }
      }

      function closeModalContent() {
        modalcontent.style = "display:none;"
        modelmodalcontent.style = "display:none;"
        cubemapmodalcontent.style = "display:none;"
      }

      function changeModalContent(condition) {
        switch (condition) {
          case "model":
            //show model content
            modalcontent.style = "display:block;"
            modelmodalcontent.style = "display:block;"
            cubemapmodalcontent.style = "display:none;"
            setupTextureAssignOptions(modeltextureassignselect);
            break;
          case "cubemap":
            //show cubemap content
            modalcontent.style = "display:block;"
            modelmodalcontent.style = "display:none;"
            cubemapmodalcontent.style = "display:block;"
            setupTextureAssignOptions(cubemaptextureassignselect);
            break;
        }
      }
    </script>


    <%- include('../partials/footer') %>