<%- include('../partials/header') %>

<body>
  <style>
    .drop-zone {
      border: 2px dotted gray;
      width:  auto;
      height: 400px;
    }

    .horizontal-middle {
      text-align: center;
    }

    .browse-btn {
      text-decoration: underline;
    }


    .upload-btn-group {
      padding-top: 2em;
    }

    .upload-page-btn {
      border: 1px solid black;
      background-color: white;
      /* border-radius: 30%; */
      color: black;
      padding: 14px 48px;
    }

    .cancel-page-btn {
      border: 1px solid black;
      background-color: white;
      /* border-radius: 30%; */
      color: black;
      padding: 14px 48px;
    }

    .card {
        width: 120px;
        height: 120px;
        position: relative;
        display: inline-block;
    }

    .file-btn {
      position: absolute;
      left: 100px;
      font-size: 20px;
      top: -5px;
    }

    .card-file-info {
      position: absolute;
      height: 32px;
      width: 100%;
      bottom: 0;
      left: 0;
    }

    .texture-assign-box {
      border: 1px solid black;
      background-color: white;
    }

    /* The Modal (background) */
    .modal {
      display: block; /* Hidden by default */
      position: fixed; /* Stay in place */
      z-index: 1; /* Sit on top */
      padding-top: 100px; /* Location of the box */
      left: 0;
      top: 0;
      width: 100%; /* Full width */
      height: 100%; /* Full height */
      overflow: auto; /* Enable scroll if needed */
      background-color: rgb(0,0,0); /* Fallback color */
      background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
      background-color: #fefefe;
      margin: auto;
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
    }

    /* The Close Button */
    .close {
      color: #aaaaaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
    }

    .close:hover,
    .close:focus {
      color: #000;
      text-decoration: none;
      cursor: pointer;
    }

  </style>

<div class="horizontal-middle"><h2>Upload a new asset</h2></div>
<div class="container">
  <div class="row">
    <div class="col">
    </div>
    <div class="col-9">
      <div class="drop-zone">
        <div class="collected-files">
        </div>
        <div class="horizontal-middle">
          <span class="drag-text">Drag and Drop </span><br>
          <span class="">or <span class="browse-btn" id="browse-btn" onclick="browse()">Browse</span></span>
          <input type="file" id="browse-input" name="file" value="" style="display:none;">
        </div>
        <p class="horizontal-middle" id="format-support-info">We support ....</p>
        <p class="horizontal-middle" id="format-3dmodel-info">You can also upload a model folder like ZIP, RAR, or 7z, containing only your textures, materials, and mesh.</p>
        <p class="horizontal-middle">Additional files can be added in the next step</p>
      </div>
      <div class="upload-btn-group">
        <button class="cancel-page-btn left" type="button" name="button">Cancel</button>
        <button class="upload-page-btn right" type="button" name="button">Next</button>
      </div>

    </div>
    <div class="col">
      <label for="asset-select">Select Asset Type:</label>
      <select name="assets" id="asset-select" onchange="triggerChangeWithAssetSelect()">
          <option value="3dmodel">3D Model</option>
          <option value="script">Script</option>
          <option value="360image">360 Image</option>
      </select>

      <label id="asset-format-id" for="asset-format">Select Format:</label>
      <select name="format" id="asset-format" onchange="onChangeFormatType(this)">
      </select>
    </div>
  </div>
</div>

<!-- The Modal -->
<div id="myModal" class="modal">
  <!-- Modal content -->
  <div class="modal-content">
    <div class="cubemap-content">
      <span class="close">&times;</span>
      <p>Assign Texture : </p>
      <div class="container">
        <div class="row" style="height: 100px;">
          <div class="col-3 texture-assign-box">
            <label for="top-texture-selection">Top</label>
            <select name="top-texture-selection" class="cubemap-texture-assign" id="texture-selection">
            </select>
          </div>
        </div>
        <div class="row" style="height: 100px;">
          <div class="col-3 texture-assign-box">
            <label for="front-texture-selection">Front</label>
            <select name="front-texture-selection" class="cubemap-texture-assign" id="texture-selection">
            </select>
          </div>
          <div class="col-3 texture-assign-box">
            <label for="right-texture-selection">Right</label>
            <select name="right-texture-selection" class="cubemap-texture-assign" id="texture-selection">
            </select>
          </div>
          <div class="col-3 texture-assign-box">
            <label for="back-texture-selection">Back</label>
            <select name="back-texture-selection" class="cubemap-texture-assign" id="texture-selection">
            </select>
          </div>
          <div class="col-3 texture-assign-box">
            <label for="left-texture-selection">Left</label>
            <select name="left-texture-selection" class="cubemap-texture-assign" id="texture-selection">
            </select>
          </div>
        </div>
        <div class="row" style="height: 100px;">
          <div class="col-3 texture-assign-box">
            <label for="bottom-texture-selection">Bottom</label>
            <select name="bottom-texture-selection" class="cubemap-texture-assign" id="texture-selection">

            </select>
          </div>
        </div>
      </div>
      <div class="upload-btn-group">
        <button class="upload-page-btn right" type="button" name="button">Next</button>
      </div>
    </div>
    <div class="model-content">
      <span class="close">&times;</span>
      <p>Hello World</p>
      <div class="upload-btn-group">
        <button class="upload-page-btn" type="button" name="button">Next</button>
      </div>
    </div>
  </div>

</body>

<script>
  const dragArea = document.querySelector(".drop-zone");
  const dragText = document.querySelector(".drag-text");
  const collectedfiles = document.querySelector(".collected-files");
  const nextpagebtn = document.querySelector(".upload-page-btn");
  nextpagebtn.addEventListener('click', function(event){
    processUploads();
    event.preventDefault();
  });

  //create option for select element
  function createoption(text,value,parent){
    var option = document.createElement("option");
    option.text = text;
    option.value = value;
    parent.add(option);
  }

  //next page btn
  function processUploads(){
    console.log(currenttype + " " + currentformat);
    //if no uploads added
    if(files.length == 0)
      alert("no uploads added");

    //if model file, process and popup to assign textures
    if(currenttype == "3dmodel"){
      changeModalContent("model");
    }
    //if cubemap file, process and popup to assign textures
    if(currenttype == "360image" && currentformat == "cubemap"){
      changeModalContent("cubemap");
    }
  }

  //creating and managing file card
  let acceptedtype = "";
  let currenttype = "";
  let currentformat = "";
  function createFileCard(filename){
    //create a card
    const card = document.createElement("div");
    card.classList.add("card");
    collectedfiles.appendChild(card);

    //create remove-btn for the card
    var removebtn = document.createElement('span');
    removebtn.innerHTML = "&times;";
    removebtn.classList.add("file-btn");
    removebtn.addEventListener('click', function(event) {
      removeFile(card,filename);
      event.preventDefault();
      });

    card.appendChild(removebtn);
    //create image for the card
    var img = document.createElement('img');
    img.src = '';
    img.classList.add("img-top");
    card.appendChild(img);


    //create file info
    var fileinfo = document.createElement('div');
    fileinfo.classList.add('card-file-info');
    card.appendChild(fileinfo);
    var fileinfospan = document.createElement('span');
    fileinfospan.innerHTML = filename;
    fileinfo.appendChild(fileinfospan);
  }
  function clearFilesIfNewType(newtype){
    if(currenttype != newtype){
      clearAllFileContent();
      currenttype = newtype;
    }
  }
  function clearAllFileContent(){
    collectedfiles.innerHTML = '';
    files = [];
  }
  function removeFile(card, filename){
    card.remove();
    for( var i = 0; i < files.length; i++){
        if ( files[i].name === filename) {
            files.splice(i, 1);
        }
    }
  }
  function setAcceptedType(type){
    console.log('change accepted type');
    switch (type)
    {
      case "image":
        acceptedtype = "image/";
        break;
      case "script":
        acceptedtype = "text/";
        break;
      case "model":
        acceptedtype = "";
        break;
    }

  }

  let files = [];
  dragArea.addEventListener('dragover', (event)=>{
    event.preventDefault();
    console.log('File is inside the drag area');
    dragText.textContent = "Release to Upload"
  });
  dragArea.addEventListener('dragleave', ()=>{
    console.log('File left the drag area');
    dragText.textContent = "Drag & Drop"
  });
  dragArea.addEventListener('drop', (event)=>{
    event.preventDefault();
    if (event.dataTransfer.items) {
      // Use DataTransfer interface to access the file(s)
      [...event.dataTransfer.files].forEach((file, i) => {
        if(acceptedtype != ""){
          if (file.type.startsWith(acceptedtype)) {
            files.push(file);
            console.log('File is an accepted type.', file.type, file);
            createFileCard(file.name);
          }
        } else {
          //accept if it's model
          files.push(file);
        }
    });
    }
  });

//browse button
function browse(){
  var i = document.getElementById("browse-input");
  i.click();
}

//updating page based on selected asset
triggerChangeWithAssetSelect();
function triggerChangeWithAssetSelect() {
  var e = document.getElementById("asset-select");
  var value = e.value;
  var options = [];
  var supportformat = "";
  switch (value) {
    case "360image":
      options = ["cubemap", "equirectangular"];
      supportformat = "We support JPG, JPEG, PNG.";
      setAcceptedType("image");
      enableModelInfo(false);
      break;
    case "script":
      options = ["c#", "javascript", "python"];
      supportformat = "We support c#, javascript, python.";
      setAcceptedType("script");
      enableModelInfo(false);
      break;
    case "3dmodel":
      supportformat = "We support obj, fbx.";
      setAcceptedType("model");
      enableModelInfo(true);
      break;
  }
  clearFilesIfNewType(value);
  createAssetFormat(options);
  updateSupportFormatText(supportformat);
}
function createAssetFormat(opts){
  var x = document.getElementById("asset-format");
  var y = document.getElementById("asset-format-id");
  if(opts.length == 0){
    x.style.display = "none";
    y.style.display = "none";
  } else {
    x.style.display = "inline-block"
    y.style.display = "inline-block"
    x.options.length = 0;
    opts.forEach((o)=>{
      createoption(o,o,x);
    });
    currentformat = x.value;
  }

}
function updateSupportFormatText(t){
  var i = document.getElementById("format-support-info");
  i.innerHTML = t;
}
function enableModelInfo(b){
  var i = document.getElementById("format-3dmodel-info");
  if(b){
    i.style.display = "inline-block";
  } else {
    i.style.display = "none";

  }
}
function onChangeFormatType(e){
  clearAllFileContent();
  currentformat = e.value;
}

//modal content selection
const modelmodalcontent = document.querySelector(".model-content");
const cubemapmodalcontent = document.querySelector(".cubemap-content")
const cubemaptextureassignselect = document.querySelectorAll('.cubemap-texture-assign');
const modalcontent = document.querySelector(".modal")
modalcontent.style = "display:none;"
modelmodalcontent.style = "display:none;"
cubemapmodalcontent.style = "display:none;"


let textureassignarray = [];
function setupCubemapTextureAssignOptions(){
  let textureassignarray = files;
  console.log("running setup cubemap texture assign options");
  for(var i = 0; i< cubemaptextureassignselect.length; i++){
      cubemaptextureassignselect[i].onchange = function(e){
      //allowOnlySingleTextureAssigning(e);
    }
    createoption("none", "none", cubemaptextureassignselect[i]);
    for(var j = 0; j < files.length; j++){
      createoption(files[j].name, files[j].name, cubemaptextureassignselect[i]);
    }
  }
}
function allowOnlySingleTextureAssigning(e){
  console.log(e.target);
  for(var i = 0; i< cubemaptextureassignselect.length; i++){
      if(cubemaptextureassignselect[i] != e.target && cubemaptextureassignselect[i].value == e.target.value){
        cubemaptextureassignselect[i].value = "none";
      }
    }
}


function changeModalContent(condition){
  switch (condition){
    case "model":
    //show model content
    modalcontent.style = "display:block;"
    modelmodalcontent.style = "display:block;"
    cubemapmodalcontent.style = "display:none;"
    break;
    case "cubemap":
    //show cubemap content
    modalcontent.style = "display:block;"
    modelmodalcontent.style = "display:none;"
    cubemapmodalcontent.style = "display:block;"
    setupCubemapTextureAssignOptions();
    break;
  }
}

</script>


<%- include('../partials/footer') %>
