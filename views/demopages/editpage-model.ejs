<%- include('../partials/header') %>

<!-- <link rel="stylesheet" href="./public/edit-page.css"> -->
<script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>
<script type="text/javascript" src="/datamuse.js"></script>

<section class="d-flex flex-column m-auto mt-5">


  <!-- <div class="container-fluid">
    <div class="row">
      <div class="col-6 d-flex align-items-end flex-column">
        <h6 class="asset-name">cyberpunk shiba inu</h6>
      </div>
    </div>
  </div> -->
  <div class="container-fluid">
    <h2 class="Title">Edit Properties</h2><br>
    <div class="row justify-content-center">
      <div class="col-6 d-flex flex-column gap-2">
        <div >
          <h6 class="asset-name">cyberpunk shiba inu</h6>
          <model-viewer class="model-viewer-dimensions border border-secondary rounded-4"id="model-viewer" alt="" src='../uploads/shiba/gltf/scene.gltf' ar ar-modes="webxr scene-viewer quick-look" seamless-poster shadow-intensity="1" camera-controls enable-pan></model-viewer>
        </div>
      
        <div class="custom-file">
          <h6>Add Files</h6>
          <input type="file" class="custom-file-input form-control" id="inputGroupFile01" accept="image/png, image/jpeg" onchange="addNewFile(this)">
          <span class="btn btn-primary btn-file">
            Browse
          </span>
        </div>
        <div class="accordion" id="accordionExample">
          <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
              <button class="accordion-button p-2" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                View Attached Files
              </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
              <div class="accordion-body p-2">
                <div class="all-files">
                  <% for(var i=0; i<content.imagefiles.length; i++) {%>
                  <div class="current-file d-flex justify-content-between w-100">
                    <span class="p-0 text-muted"><%=content.imagefiles[i]%></span>
                    <button class="remove-file bg-transparent border-0" onclick="removeExistingFile(this,'<%-content.imagefiles[i]%>')"><i class="fa-regular fa-trash-can trash-btn"></i
                      ></button>
                    
                  </div>
                  <hr class="m-0">
                  <%}%>
                </div>
              </div>
            </div>
          </div>
        </div>
        
      </div>
      <div class="col-5 d-flex flew-wrap gap-4 flex-column">
      <div>
          <h6>Title</h6>
          <input class="title-info w-100" type="text" class="form-control" placeholder="" aria-label="Username" aria-describedby="basic-addon1">
        </div>
        <div>
          <h6>Description</h6>
          <textarea class="desc-info desc-info-dimension form-control" aria-label="With textarea"></textarea>
        </div>
      <div>
     
      <div class="d-flex justify-content-between flex-wrap">
        <h6 class="w-100">Technical Details</h6>
        <div class="d-flex flex-wrap">
          <div class="form-check form-check-inline text-muted p-0 mb-0 d-flex">
            <input class="low-poly-info" name="optradio" class="main form-check-input" type="checkbox" id="detail-lowpoly" value="lowpoly" />
            <label class="form-check-label" for="detail-lowpoly">Low-poly</label>
          </div>
          <div class="form-check form-check-inline text-muted p-0 mb-0 d-flex">
            <input class="rigged-info" name="optradio" class="form-check-input" type="checkbox" id="detail-rigged" checked value="rigged" />
            <label class="form-check-label" for="detail-rigged" checked>Rigged</label>
          </div>
          <div class="form-check form-check-inline text-muted p-0 mb-0 d-flex">
            <input class="animated-info" name="optradio" class="form-check-input" type="checkbox" id="detail-animated" checked value="animated" />
            <label class="form-check-label" for="detail-animated" checked>Animated</label>
          </div>
          <div class="form-check form-check-inline text-muted p-0 mb-0 d-flex">
            <input class="textured-info" name="optradio" class="form-check-input" type="checkbox" id="detail-texture" checked value="textures" />
            <label class="form-check-label" for="detail-texture" checked>Textured</label>
          </div>
        </div>
       
      </div>
    </div>     

    <div>
      <h6>Tags</h6>
      <input type="text" id="tag_input_content" name="tag_input_content" value="" readonly>
      <div id="selected_tags_group" class="selected-tags"></div>
      <input type="text" class="form-control" type="text" id='tag_create' value="" placeholder="" aria-label="Username" aria-describedby="basic-addon1">
      <div class="selected-tags" id="tag_suggest">
      </div>
      
    </div>
    <div >
      <div class="row justify-content-between">
        <div class="col-4">
          <button type="button" class="btn btn-outline-info rounded-8">Delete</button>
        </div>
        <div class="col-4 d-flex  justify-content-end">
          <!-- <button type="button" class="mr-4 btn btn-lg btn-outline-primary text-white">Preview</button> -->
      
          <button onclick="createUploadContent()" type="button" class="publish-btn btn theme-color btn-rounded" >Publish</button>
        </div>
      </div>
</div>
  </section>
<script>
  var suggestedtagelements = [];
  var selectedtagelements = [];
  var files = [];
  var newfiles = [];
  var modelviewer = document.getElementById('model-viewer');
  var modelpath = '';
  async function createUploadContent() {
    const formData = new FormData();
    const request = new XMLHttpRequest();
    var nextURL = "/view-model";
    var postURL = "/save3dmodel";
    console.log("create upload content");

    var data = {
      files : [],
      modelfile: <%- JSON.stringify(content.modelfile)%>,
      gltfmodelpath: modelpath,
      title : document.querySelector(".title-info").value,
      description : document.querySelector(".desc-info").value,
      lowpoly : document.querySelector(".low-poly-info").checked,
      rigged : document.querySelector(".rigged-info").checked,
      animated : document.querySelector(".animated-info").checked,
      textured : document.querySelector(".textured-info").checked,
      folderpath: <%- JSON.stringify(content.folderpath)%>,
      diffusepath : getTextureFromFilesArray('diffuse'),
      emissivepath : getTextureFromFilesArray('emissive'),
      thumbnail: <%- JSON.stringify(content.thumbnail)%>,
      tags : []
      }
      var tags = document.querySelectorAll(".selected_tag_element");
      for(i = 0; i<tags.length;i++){ data.tags.push(tags[i].innerText); }
      data.files=files;
      console.log(data);
      for(i=0; i< newfiles.length;i++)
      { formData.append('file', newfiles[i]); }
      formData.append('data', JSON.stringify(data));
      let thumbnailpath='<%- content.thumbnail %>' ;
      if(thumbnailpath=='')
      {
        var modelviewer=document.getElementById('model-viewer');
        var blob = await modelviewer.toBlob();
        var file = new File([blob], 'new_thumbnail.png');
        console.log(file);
        formData.append('newthumbnail', file);
      }


      request.onreadystatechange = function() { // listen for state changes
      if (request.readyState == 4 && request.status == 200) { // when completed we can move away
      window.location = nextURL;
      }
      }
      request.open("POST", postURL, false);
      request.send(formData);
  }


  getEJScontent();

  function getEJScontent(){
  <% if (content) {  %>
    <% if (content.imagefiles) {  %>
  files = <%- JSON.stringify(content.imagefiles)%>;
  <% }  %>
  modelpath = '<%- content.modelviewerpath %>';
  console.log(modelpath);
  modelviewer.src = modelpath;
  console.log(getTextureFromFilesArray('diffuse'));
  <% } else { %>
  console.log("does not exist");
  <% } %>

  console.log(modelviewer);
  modelviewer.addEventListener('load', saveThumbnail);
  }

  function getTextureFromFilesArray(typename){
    var result ="";
    for(i=0;i<files.length;i++){
      if(files[i].split("_")[0] == typename){
        result = files[i];
      }
    }
    return result;
  }

  modelviewer.addEventListener("load", () => {
  const material = modelviewer.model.materials[0];
  const createAndApplyTexture = async (channel) => {
    // Applies the new texture to the specified channel.
    var diffusepath = getTextureFromFilesArray('diffuse');
    if(diffusepath != ""){
      var diffuse = await modelviewer.createTexture("../uploads/tmp/" + diffusepath);
      material.pbrMetallicRoughness['baseColorTexture'].setTexture(diffuse);
    }
    var emissivepath = getTextureFromFilesArray('emissive');
    if(emissivepath != ""){
      var emission = await modelviewer.createTexture("../uploads/tmp/" + emissivepath);
      material['emissiveTexture'].setTexture(emission);
    }
  }
    createAndApplyTexture('baseColorTexture');
  });

  function saveThumbnail(callback){
  console.log('running save thumbnail 2');
  //create thumbnail via canvas then save in formdata afterwards
  // var image = modelviewer.toDataURL("image/png", 0.5).replace("image/png", "image/octet-stream"); // here is the most important part because if you dont replace you will get a DOM 18 exception.
  modelviewer.toBlob((result)=>{
  console.log(result);
  callback(result)
  }, 'image/jpeg');
  }


  function removeExistingFile(el, filename){
  files = files.filter(i => i !== filename);
  console.log(files);
  var element = el;
  element.parentElement.remove();
  }

  function addNewFile(el){
  console.log(el.files[0].name);
  newfiles.push(el.files[0]);
  let p = document.querySelector('.all-files')
  console.log(p);
  let main = document.createElement('div');
  main.classList.add("new-file");
  p.appendChild(main);
  let btn = document.createElement('button');
  btn.innerHTML = '<i id ="trash-icon" class="trash-btn fa-regular fa-trash-can"></i>';
  btn.className="remove-file bg-transparent border-0"
  let tag = document.createElement("span");
  tag.innerHTML = el.files[0].name;
  main.appendChild(tag);
  main.appendChild(btn);
  btn.onclick = function(){
  removeNewFile(main,el.files[0]);
  }
  }

  function removeNewFile(el,file){
  newfiles = newfiles.filter(i => i !== file);
  var element = el;
  element.remove();
  }




  const node = document.getElementById("tag_create");
  node.addEventListener("keyup", function(event) {
  if (event.key === "Enter") {
  // Do work
  if (selectedtagelements.includes(node.value)) return;
  addTag(node.value);
  createTagSuggestion(node.value);
  node.value = "";

  }
  });

  function clearsuggestedtagelements() {
  if (suggestedtagelements.length === 0) return;
  suggestedtagelements.forEach(e => {
  e.remove();
  })
  }

  function createTagSuggestion(tagname) {
  clearsuggestedtagelements();
  suggestionsFromDatamuse(tagname).then(result => {
  result.forEach(a => {
  createSuggestElement(a.word);
  });
  });
  }

  function createSuggestElement(tagname) {
  // let col = document.createElement('div');
  // col.classList = 'suggested-tag border-secondary border rounded-5 px-1';
  // document.getElementById('tag_suggest').appendChild(col);
  // col.innerHTML = '<i class="fa-solid fa-plus icon small-icon-size"></i>'
  let tag = document.createElement("div");
  tag.innerHTML = tagname;
  let addBtn = document.createElement("button")
  addBtn.setAttribute('id', 'tag_suggest');
  // addBtn.append(tag);
  addBtn.innerHTML= `<div>${tagname}</div><i class="fa-solid fa-plus icon small-icon-size  ms-2 "></i>`;
  addBtn.classList="d-flex align-items-center bg-transparent suggested-tag border-secondary border rounded-2 p-1 btn"
  document.getElementById('tag_suggest').appendChild(addBtn);
  //tag.classList.add('tag_element');
  addBtn.onclick = function() {
  if (selectedtagelements.includes(tagname)) return;
  addTag(tagname);
  createTagSuggestion(tagname);
  };
  //add to suggested tag element array
  suggestedtagelements.push(col);
  }

  function addTag(tagname) {
  //get div child from group
  var div = document.getElementById('selected_tags_group');
  //create div to inclde tag + cross btn
  // var tagDiv= document.createElement('div');
  //tagDiv.classList="tag border border-secondary rounded-2 px-1 text-white"
  //create x button
  var tagBtn = document.createElement('button');
  tagBtn.innerHTML = `<span class= "selected_tag_element">${tagname}</span><i class="fa-solid fa-xmark small-icon-size  ms-2 "></i>`;
  // tagBtn.innerHTML="x"
  tagBtn.classList="p-0 text-white p-1 btn tag rounded-2 px-2"
  //create span element with id of selected_tag_element
  // var tag = document.createElement('span');
  // tagBtn.append(tag)
  // tag.innerText = " " + tagname;
  // tag.setAttribute("class", "selected_tag_element");
  tagBtn.onclick = function() {
  div.removeChild(tagBtn);
  selectedtagelements = selectedtagelements.filter(e => e !== tagname);
  };
  div.appendChild(tagBtn);
  let taginput = document.getElementById("tag_input_content");
  taginput.value = selectedtagelements.toString();
  selectedtagelements.push(tagname);
  }
  </script>


  <%- include('../partials/footer') %>
