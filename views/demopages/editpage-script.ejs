<%- include('../partials/header') %>

<link rel="stylesheet" href="../modellist.css">
<!-- Create a simple CodeMirror instance -->
<link rel="stylesheet" href="/codemirror-5.65.9/lib/codemirror.css">
<script src="/codemirror-5.65.9/lib/codemirror.js"></script>
<script src="/codemirror-5.65.9/mode/javascript/javascript.js"></script>

<script type="text/javascript" src="/datamuse.js"></script>

<body>
  <h2 class="Title text-center">Edit Properties</h2><br>

  <div class="container-fluid">
    <div class="row">
      <div class="col-6 d-flex align-items-end flex-column">
        <h5 class="asset-name">cyberpunk shiba inu</h5>
      </div>
    </div>
  </div>
  <div class="container-fluid">
    <div class="row justify-content-center">
      <div class="col-4">
        <textarea class="codemirror-textarea"></textarea>
        <br>
        <h5>Additional Files</h5>
        <div class="all-files">
          <% for(var i=0; i<scripts.length; i++) {%>
          <div class="current-file">
            <button class="remove-file" >X</button>
            <span><%=scripts[i]%></span>
            <br>
          </div>
          <%}%>
        </div>
        <br>
        <h5>Additional Files</h5>
        <div class="custom-file">
          <input type="file" class="custom-file-input" id="inputGroupFile01" accept=".cs .js .py" onchange="addNewFile(this)">
          <label class="custom-file-label" for="inputGroupFile01">Choose file</label>
        </div>
      </div>
      <div class="col-4">
        <h5>Title</h5>
        <input type="text" class="form-control title-info" placeholder="" aria-label="Username" aria-describedby="basic-addon1">
        <br>
        <h5>Description</h5>
        <textarea class="form-control desc-info" aria-label="With textarea"></textarea>
        <br>
        <h5>Technical Details</h5>
        <div class="form-check form-check-inline">
          <input name="optradio" class="form-check-input" type="checkbox" id="detail-lowpoly" value="lowpoly" />
          <label class="form-check-label" for="detail-lowpoly">Low-poly</label>
        </div>
        <div class="form-check form-check-inline">
          <input name="optradio" class="form-check-input" type="checkbox" id="detail-rigged" checked value="rigged" />
          <label class="form-check-label" for="detail-rigged" checked>Rigged</label>
        </div>
        <div class="form-check form-check-inline">
          <input name="optradio" class="form-check-input" type="checkbox" id="detail-animated" checked value="animated" />
          <label class="form-check-label" for="detail-animated" checked>Animated</label>
        </div>
        <div class="form-check form-check-inline">
          <input name="optradio" class="form-check-input" type="checkbox" id="detail-texture" checked value="textures" />
          <label class="form-check-label" for="detail-texture" checked>Textures</label>
        </div>
        <br><br>
        <h5>Tags</h5>
        <input type="text" id="tag_input_content" name="tag_input_content" value="" readonly>
        <p id="selected_tags_group"></p>
        <input type="text" class="form-control" type="text" id='tag_create' value="" placeholder="" aria-label="Username" aria-describedby="basic-addon1">
        <div class="row justify-content-sm-start" id="tag_suggest">
        </div>
      </div>
    </div>
    <br><br>
    <div class="container-fluid">
      <div class="row justify-content-center">
        <div class="col-4">
          <button type="button" class="btn btn-lg btn-outline-primary text-white">Delete</button>
        </div>
        <div class="col-4 d-flex  justify-content-end">
          <button type="button" class="mr-4 btn btn-lg btn-outline-primary text-white">Preview</button>
          <button  onclick="createUploadContent()" type="button" class="btn btn-lg btn-outline-primary text-white">Publish</button>
        </div>
      </div>
    </div>
</body>

<script>
  var files = [];
  var newfiles = [];
  var editor = CodeMirror.fromTextArea(document.querySelector(".codemirror-textarea"), {
      lineNumbers: true,
      styleActiveLine: true,
      matchBrackets: true,
      readOnly: 'nocursor'
    });
  console.log(files);



  getEJScontent();

  function getEJScontent(){
  <% if (scripts) {  %>
  files = <%- JSON.stringify(scripts)%>;
  readTxt("uploads/tmp/" + files[0]);
  <% } else { %>
  console.log("does not exist");
  <% } %>
  }

const reader = new FileReader();


function readTxt(path){
  var result = '';
  // "http://localhost:8080/public/help/index.html"
  const loc = window.location.protocol + "//" + window.location.host + "/";
  // "http://localhost:8080/public/help/"
  const fullpath = loc + path;
  // const fullpath = loc.substr(0, loc.lastIndexOf('/') + 1);
  console.log(fullpath);
  fetch(fullpath)
    .then(res => res.blob()) // Gets the response and returns it as a blob
    .then(blob => {
      if (blob) {
        console.log(blob);
        blob.text().then(txt => {
          console.log(txt);
          console.log(editor);
          insertText(txt);
          return txt;
        })
      }
  });
}

function insertText(data) {
	var doc = editor.getDoc();
	var cursor = doc.getCursor(); // gets the line number in the cursor position
	var line = doc.getLine(cursor.line); // get the line contents
	var pos = {
		line: cursor.line
	};
	if (line.length === 0) {
		// check if the line is empty
		// add the data
		doc.replaceRange(data, pos);
	} else {
		// add a new line and the data
		doc.replaceRange("\n" + data, pos);
	}
}

async function createUploadContent() {
  const formData = new FormData();
  const request = new XMLHttpRequest();
  var nextURL = "/view-script";
  var postURL = "/savescript";
  console.log("create upload content");

  var data = {
    files : [],
    title : document.querySelector(".title-info").value,
    description : document.querySelector(".desc-info").value,
    tags : []
    }
    var tags = document.querySelectorAll("#selected_tag_element");
    for(i = 0; i<tags.length;i++){ data.tags.push(tags[i].innerText); }
    data.files=files;
    console.log(data);

    for(i=0; i< newfiles.length;i++)
    { formData.append('file', newfiles[i]); }
    formData.append('data', JSON.stringify(data));


    // request.onreadystatechange = function() { // listen for state changes
    // if (request.readyState == 4 && request.status == 200) { // when completed we can move away
    // window.location = nextURL;
    // }
    // }
    request.open("POST", postURL, false);
    request.send(formData);
}

function addNewFile(el){
console.log(el.files[0].name);
newfiles.push(el.files[0]);
let p = document.querySelector('.all-files')
console.log(p);
let main = document.createElement('div');
main.classList.add("new-file");
p.appendChild(main);
let btn = document.createElement('button');
btn.innerHTML = "X";
let tag = document.createElement("span");
tag.innerHTML = el.files[0].name;
main.appendChild(btn);
main.appendChild(tag);
btn.onclick = function(){
removeNewFile(main,el.files[0]);
}
}


  var suggestedtagelements = [];
  var selectedtagelements = [];

  const node = document.getElementById("tag_create");
  node.addEventListener("keyup", function(event) {
    if (event.key === "Enter") {
      // Do work
      if (selectedtagelements.includes(node.value)) return;
      addTag(node.value);
      createTagSuggestion(node.value);
      node.value = "";

    }
  });

  function clearsuggestedtagelements() {
    if (suggestedtagelements.length === 0) return;
    suggestedtagelements.forEach(e => {
      e.remove();
    })
  }

  function createTagSuggestion(tagname) {
    clearsuggestedtagelements();
    suggestionsFromDatamuse(tagname).then(result => {
      result.forEach(a => {
        createSuggestElement(a.word);
      });
    });
  }

  function createSuggestElement(tagname) {
    let col = document.createElement('div');
    col.classList.add('col-auto');
    document.getElementById('tag_suggest').appendChild(col);
    let tag = document.createElement("p");
    tag.innerHTML = tagname;
    col.appendChild(tag);
    tag.classList.add('tag_element');
    tag.onclick = function() {
      if (selectedtagelements.includes(tagname)) return;
      addTag(tagname);
      createTagSuggestion(tagname);
    };

    //add to suggested tag element array
    suggestedtagelements.push(col);
  }

  function addTag(tagname) {
    //get paragraph child from group
    var paragraph = document.getElementById('selected_tags_group');
    //create span element with id of selected_tag_element
    var tag = document.createElement('span');
    tag.innerText = " " + tagname;
    tag.setAttribute("id", "selected_tag_element");
    tag.onclick = function() {
      paragraph.removeChild(tag);
      selectedtagelements = selectedtagelements.filter(e => e !== tagname);
    };
    paragraph.appendChild(tag);
    let taginput = document.getElementById("tag_input_content");
    taginput.value = selectedtagelements.toString();
    selectedtagelements.push(tagname);
  }
</script>


<%- include('../partials/footer') %>
